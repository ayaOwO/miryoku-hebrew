#pragma once


oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    if (!is_master) { // is_keyboard_left()) {
      return OLED_ROTATION_180;  // flips the display 180 degrees if offhand
    }
    return OLED_ROTATION_270;//rotation;
}

void keyboard_post_init_user(void) {
  rgblight_enable_noeeprom();
  rgblight_sethsv_noeeprom(HSV_TEAL); // or even sth. like rgblight_sethsv_noeeprom(HSV_TEAL);
}


void oled_task_user(void) {
    if (is_master) {//is_keyboard_left()) {
        oled_render_layer_state();
    } else {
      static const char PROGMEM YOUR_logo[] = { 
        // 'sheika eye + apple logo + hands ', 128x32px
        0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x30, 0x10, 0x98, 0x8c, 0x04, 0x00, 0x43, 0x64, 0xeb, 0xcb, 
        0x04, 0x23, 0x50, 0xaa, 0x52, 0x26, 0x0c, 0x18, 0x10, 0x20, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x80, 
        0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x10, 0x14, 0x55, 0x55, 0x55, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x0c, 0x12, 0x2d, 0x2d, 0x12, 0x0c, 0x80, 0xc0, 0xe1, 0x03, 0xf1, 0x8c, 0xc6, 0x23, 0x81, 0x81, 
        0x23, 0xc6, 0x98, 0xe0, 0x80, 0x81, 0xc3, 0xc6, 0xec, 0xe8, 0xe8, 0xc8, 0xcd, 0x87, 0x00, 0x0c, 
        0x1c, 0x7c, 0x7c, 0xf8, 0xf0, 0xe0, 0xcf, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 
        0x00, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe2, 0xc3, 0x83, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x30, 0x48, 0xb4, 0xb4, 0x48, 0x30, 0x01, 0x03, 0x87, 0xc0, 0x8f, 0x31, 0x63, 0xc4, 0x81, 0x81, 
        0xc4, 0x63, 0x19, 0x07, 0x81, 0xc1, 0x73, 0x33, 0x77, 0x67, 0xc7, 0x83, 0x43, 0x81, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 
        0x00, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x47, 0xc3, 0xc1, 0x80, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x08, 0x19, 0x31, 0x20, 0x00, 0xc2, 0x26, 0xd7, 0xd3, 
        0x20, 0xc0, 0x04, 0x8e, 0xdb, 0x71, 0x23, 0x06, 0x2c, 0x50, 0xa9, 0x52, 0x25, 0x02, 0x01, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 
        0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x08, 0x2a, 0xaa, 0xaa, 0xaa, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfe, 
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
      oled_write_raw_P(YOUR_logo, sizeof(YOUR_logo));
    }
}


void oled_render_layer_state(void) {

    
    oled_set_cursor(0, 6);
    switch (get_highest_layer(layer_state)) {
        case NAV:
        {
            oled_write_ln_P(PSTR("NAV"), false);
            break;
        }
        case MOUSE:
        {
            oled_write_ln_P(PSTR("MOUSE"), false);
            break;
        }

        case MEDIA:
        {
            oled_write_ln_P(PSTR("MEDIA"), false);
            break;
        }
        case NUM:
        {
            oled_write_ln_P(PSTR("NUM"), false);
            break;
        }

        case SYM:
        {
            oled_write_ln_P(PSTR("SYM"), false);
            break;
        }

        case FUN:
        {
            oled_write_ln_P(PSTR("FUN"), false);
            break;
        }
        default:
        {
            oled_write_ln_P(PSTR("FUN"), false);
            break;
        }
    }
}